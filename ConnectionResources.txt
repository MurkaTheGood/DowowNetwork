This file describes how resources inside Connection class are used.

It is meaningless to discuss members access without started background
thread, so in all the following conditions we assume that the background
thread is started and several handlers are running in separate threads.

Members accessed only by background thread:
    - socket_fd
    - send_buffer
    - send_buffer_length
    - send_buffer_offset
    - recv_buffer
    - recv_buffer_length
    - recv_buffer_offset
    - is_recv_length

Members accessed by main thread, backgroung thread and handler threads:
    - free_request_id
    - is_even_request_parts
    - is_disconnecting
    - send_block_size
    - recv_buffer_max_length
    - recv_block_size
    - send_queue
    - recv_queue
    - handler_default
    - handlers_named
    - our_sa_interval
    - their_na_interval
    - refs_amount
    - background_thread
    - receive_events

The Connection must be considered as connected if the background_thread is
not a null-pointer. The stopped_event is used to indicate that the thread
is finished. When this FD is possible to be read the connection is closed.
BEWARE: that eventfd must never ever be read outside the ConnThreadFunc()!
The background thread detaches itself when it gets finished. Please be aware
of the fact that valgrind will tell you that there are some bytes probably lost if
you don't sleep before the program exit. Why? Because the OS thread scheduler
does not free the thread resources by the moment the application quits. Nevertheless,
the resources are actually freed, just put sleep() in the end of you program if
it is being debugged in order to avoid the incorrect memory leak warning.

FILE DESCRIPTORS:
    - stopped_event     The eventfd that delivers the signal about
                        background thread termination, i.e.
                        disconnection.
                        The external code must not read it, only
                        poll(), select(), epoll()...
                        While/when/if the descriptor is readable, the
                        conenction is closed.
                        One is written to this fd immidiately after the
                        instantiation of Connection object and when the
                        background thread is completely finished.
                        This FD is reset in InitializeByFD()
    - push_event        The eventfd that tells the background thread something
                        like "hey bro, there's a new Request in the send_queue".
                        The external code does not have direct access to it,
                        the data is written here inside Push(...) methods.
                        The background thread reads this FD if that's
                        possible.
    - to_stop_event     The eventfd that is used to tell the background
                        thread: "hey bro, stop what you are doing right now".
                        The data is written to this FD only by Disconnect()
                        method.
                        This FD is reset in InitializeByFD()
    - receive_events    The eventfd(s) those are used to signal the Pull()
                        callers that there is some data to pull.
                        The data is written to these FDs in Receive() method
                        that is called in background thread. Nevertheless the
                        data is never read, this FD is used only to be poll()ed.
                        The according FD is closed and removed from receive_events
                        list in Pull() method right before it returns.
    - not_needed_event  The eventfd that is used to wait until the external code
                        doesn't reference the Connection anymore. Never read, only
                        written to.
    - our_sa_timer      The timerfd that is used to clock still-alive requests
                        from the local side. It is reset every time the Send()
                        function sends some data to remote endpoint.
    - their_na_timer    The timerfd that is used to handle not-alive timeout.
                        If it clocks then the connection is broken and the
                        background thread will be terminate.



FILE DESCRIPTORS LIFETIME:
The same as Connection object instance:
    - stopped_event
    - push_event
    - to_stop_event
    - our_sa_timer
    - their_na_timer
During Pull() call:
    - all elements of the 'receive_events' list
During background thread termination:
    - not_needed_event
